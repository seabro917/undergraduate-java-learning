由于sleep（）方法是Thread类的方法，因此它不能改变对象的机锁。
所以当在一个Synchronized方法中调用sleep（）方法时，线程虽然被休眠了，但是对象的机锁并没有被释放，其他线程仍然无法访问这个对象（临界资源）。
而wait（）方法则会在线程休眠的时候释放掉机锁，其他线程可以访问这个对象。

Yield()方法是停止当前线程，让同等优先权的线程运行。如果没有同等优先权的线程，那么Yield() 方法将不会起作用。

一个线程结束的标志是：run()方法结束。

一个机锁被释放的标志是：synchronized块或方法结束。

Wait()方法和notify()方法：当一个线程执行到wait()方法时，它就进入到一个和该对象相关的等待池中，同时失去了对象的机锁。当它被一个notify()方法
唤醒时，等待池中的线程就被放到了锁池中。该线程从锁池中获得机锁，然后回到wait()前的中断现场。

join()方法使当前线程停下来等待，直至另一个调用join方法的线程终止。

值得注意的是：线程的在被唤醒激活后不一定马上就运行，而是进入到可运行线程的队列中。

共同点： 
他们都是在多线程的环境下，都可以在程序的调用处阻塞指定的毫秒数，并返回。
★但是wait()和sleep()都可以通过interrupt()方法打断线程的暂停状态，从而使线程立刻抛出InterruptedException。 //2018.7.17_Test InterruptTest.java

不同点： 
Thread.sleep(long)可以不在synchronized的块下调用，而且使用Thread.sleep()不会丢失当前线程对任何对象的同步锁(monitor);
object.wait(long)必须在synchronized的块下来使用，调用了之后失去对object的monitor, 
这样做的好处是它不影响其它的线程对object进行操作。


★因此,我们可将一个wait()和notify()置入任何同步方法或同步块内部，无论在那个类里是否准备进行涉及线程的处理。而且实际上,我们也只能在同步方法或者
同步块里面调用wait()和notify().